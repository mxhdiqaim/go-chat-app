// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (id, name) VALUES ($1, $2) RETURNING id, name, created_at
`

type CreateRoomParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, arg.ID, arg.Name)
	var i Room
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username) VALUES ($1, $2) RETURNING id, username, created_at
`

type CreateUserParams struct {
	ID       pgtype.UUID `json:"id"`
	Username string      `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const getRoomByName = `-- name: GetRoomByName :one
SELECT id, name, created_at FROM rooms WHERE name = $1 LIMIT 1
`

func (q *Queries) GetRoomByName(ctx context.Context, name string) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByName, name)
	var i Room
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, created_at FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}
